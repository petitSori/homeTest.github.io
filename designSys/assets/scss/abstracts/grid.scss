@charset "utf-8";

@mixin make-grid-container() {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  padding-left: map-get($grid-margin, mobile);
  padding-right: map-get($grid-margin, mobile);

  @each $breakpoint-name, $breakpoint-value in $grid-breakpoints {
    @media (min-width: $breakpoint-value) {
      padding-left: map-get($grid-margin, $breakpoint-name);
      padding-right: map-get($grid-margin, $breakpoint-name);
    }
  }
}

@mixin make-grid-row() {
  display: flex;
  flex-wrap: wrap;
  margin-left: - (map-get($grid-gutter, mobile) / 2);
  margin-right: - (map-get($grid-gutter, mobile) / 2);

  @each $breakpoint-name, $breakpoint-value in $grid-breakpoints {
    @media (min-width: $breakpoint-value) {
      margin-left: - (map-get($grid-gutter, $breakpoint-name) / 2);
      margin-right: - (map-get($grid-gutter, $breakpoint-name) / 2);
    }
  }
}


@mixin make-grid-column($size) {
  flex: 0 0 auto;
  width: (100% / map-get($grid-columns, mobile)) * $size; 
  padding-left: map-get($grid-gutter, mobile) / 2;
  padding-right: map-get($grid-gutter, mobile) / 2;

  @each $breakpoint-name, $breakpoint-value in $grid-breakpoints {
    @if ($breakpoint-name != mobile) { 
      @media (min-width: $breakpoint-value) {
        width: (100% / map-get($grid-columns, $breakpoint-name)) * $size;
        padding-left: map-get($grid-gutter, $breakpoint-name) / 2;
        padding-right: map-get($grid-gutter, $breakpoint-name) / 2;
      }
    }
  }
}

@mixin make-grid-offset($size) {
  margin-left: (100% / map-get($grid-columns, mobile)) * $size;

  @each $breakpoint-name, $breakpoint-value in $grid-breakpoints {
    @if ($breakpoint-name != mobile) {
      @media (min-width: $breakpoint-value) {
        margin-left: (100% / map-get($grid-columns, $breakpoint-name)) * $size;
      }
    }
  }
}

.container {
  @include make-grid-container();
}

.row {
  @include make-grid-row();
}

@for $i from 1 through 12 {
  .col-#{$i} {
    @include make-grid-column($i);
  }
}

// 반응형 컬럼
@each $breakpoint-name, $breakpoint-value in $grid-breakpoints {
  @if ($breakpoint-name != mobile) {
    @media (min-width: $breakpoint-value) {
      @for $i from 1 through map-get($grid-columns, $breakpoint-name) {
        .col-#{$breakpoint-name}-#{$i} {
          @include make-grid-column($i);
        }
      }
    }
  }
}


@for $i from 1 through 11 {
  .offset-#{$i} {
    @include make-grid-offset($i);
  }
}


@each $breakpoint-name, $breakpoint-value in $grid-breakpoints {
  @if ($breakpoint-name != mobile) {
    @media (min-width: $breakpoint-value) {
      @for $i from 1 through (map-get($grid-columns, $breakpoint-name) - 1) { // offset은 마지막 컬럼 제외
        .offset-#{$breakpoint-name}-#{$i} {
          @include make-grid-offset($i);
        }
      }
    }
  }
}